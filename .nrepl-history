(seq lol)
(new-class java.awt.Point (seq lol))
(new-class java.awt.Point (apply lol))
(apply (new-class java.awt.Point) lol)
(apply new-class (conj lol java.awt.Point))
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(ednToObject '[java.awt.Point 1 2])
exçt
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn"
à)
(loadCameras "camera.edn")
(loadCameras "camera.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
)
(ednToObject '[java.awt.Point 1 2])
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(ednToObject '[java.awt.Point 1 2])
(def lol (ednToObject '[java.awt.Point 1 2]))
(def mdr '(1 2))
(conj mdr lol)
lol
(new-class java.awt.Point 1 2)
(new-class java.awt.Point lol)
)
(new java.awt.Point 1 2)
(new java.awt.Point mdr)
(new java.awt.Point lol)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
:q
(new java.awt.Point (new java.awt.Point 1 2))
(apply new (java.awt.Point 1 2))
(apply + ( 1 2))
(apply + (1 2))
(apply '+ (1 2))
(apply new (java.awt.Point 1 2))
(apply (new java.awt.Point) (1 2))
(apply '+ (1 2))
(apply max (1 2))
(apply max [1 2])
(apply new [java.awt.Point 1 2])
(apply 'new [java.awt.Point 1 2])
(apply new [java.awt.Point 1 2])
(new java.awt.Point (new java.awt.Point 1 2))
(apply new (java.awt.Point 1 2))
(new java.awt.Point 1 2)
(new (java.awt.Point 1 2))
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(ednToObject [java.awt.Point 1 2])
(ednToObject [java.awt.Point [java.awt.Point 1 2]])
)
(new [java.awt.Point 1 2])
(apply new [java.awt.Point 1 2])
(apply new-class [java.awt.Point 1 2])
(apply new-class [java.awt.Point [java.awt.Point 1 2]])
(def lol (apply new-class [java.awt.Point 1 2]))
(apply new-class [java.awt.Point lol])
(apply new-class (conj (1 2) java.awt.Point)
)
(apply new-class (conj (1 2) java.awt.Point))
(apply new-class (vector java.awt.Point 1 2))
(apply new-class (vector java.awt.Point (1 2)))
(.newInstance java.awt.Point (1 2))
(.newInstance java.awt.Point 1 2)
(clojure.lang.Reflector/invokeConstructor Klass (to-array [arg ...]))
(clojure.lang.Reflector/invokeConstructor java.awt.Point (to-array (1 2)))
(clojure.lang.Reflector/invokeConstructor java.awt.Point (to-array [1 2]))
(vec (1 2 3))
(vec '(1 2 3))
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(ednToObject [java.awt.Point 1 2])
exot
exit
(ednToObject [java.awt.Point 1 2])
(clojure.lang.Reflector/invokeConstructor java.awt.Point (to-array [1 2]))
(clojure.lang.Reflector/invokeConstructor java.awt.Point (to-array (1 2)))
(clojure.lang.Reflector/invokeConstructor java.awt.Point (1 2))
(clojure.lang.Reflector/invokeConstructor java.awt.Point (into-array (1 2)))
(into-array (1 2))
(into-array '(1 2))
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(ednToObject [java.awt.Point 1 2])
(ednToObject [java.awt.Point [java.awt.Point 1 2]])
(loadCamera)
(loadCameras)
(loadCameras "cameras.edn" world)
(loadCameras "camera.edn" world)
(Class/forName java.awt.Point)
(Class/forName 'java.awt.Point)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(ednToObject [java.awt.Point [java.awt.Point 1 2]])
(loadCameras "camera.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(ednToObject [java.awt.Point [java.awt.Point 1 2]])
(ednToObject ['java.awt.Point [java.awt.Point 1 2]])
(e(resolve dnToObject ['java.awt.Point [java.awt.Point 1 2]])
)
(ednToObject [(resolve 'java.awt.Point) [java.awt.Point 1 2]])
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
ls
(def lol [1 2])
(lazy-seq lol)
(rest (lazy-seq lol))
(def lol (1 2))
(def lol '(1 2))
(into-array lol)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
(do (println "lol") 1)
(do (println) 1)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
args
(vec args)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
classe
args
(clojure.lang.Reflector/invokeConstructor (resolve classe args)
)
(clojure.lang.Reflector/invokeConstructor classe args)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
cclasse
classe
args
(clojure.lang.Reflector/invokeConstructor classe args)
(vec args)
(construct)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
args
(into-array args)
(construct classe args)
(use 'org.joml.Vector3f)
(java.awt.Point 1 2)
(new java.awt.Point 1 2)
(new org.joml.Vector3f 1 2 3)
(construct org.joml.Vector3f '(1 2 3))
exit
java.lang.IllegalArgumentException: No matching ctor found for class org.joml.Vector3f
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
(construct org.joml.Vector3f '(1 2 3))
exit
#!/usr/bin/env boot
(set-env! :repositories #(conj % ["mavencentral" {:url "https://repo.maven.apache.org/maven2"}])
:dependencies '[[org.joml/joml "1.7.1"] [org.lwjgl/lwjgl "3.0.0b"] [org.lwjgl/lwjgl-platform "3.0.0b" :classifier "natives-linux"]]
:resource-paths #{"yaw/"})
(deftask build
  "Build YAW Project."
  []
  (comp 
(pom :project 'yaw :version "0.1.0")  
(javac "./yaw/java/src/gameEngine/*.java")
(javac "./yaw/java/src/gameEngine/light/*.java")
(aot :all)
;;(jar :file "YAW.jar")
;;(install)
))
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
a
c
(conj a c)
(defn lol [mdr & ptdr] (println "mdr" mdr "ptdr" ptdr))
(lol (conj a c))
(lol (vec (conj a c)))
(clojure.lang.Reflector/invokeConstructor c a)
(clojure.lang.Reflector/invokeConstructor c (into-array a)-
)
(clojure.lang.Reflector/invokeConstructor c (into-array a))
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
exit
(def world (:world @universe))
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
c
a
exit
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
a
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
:q
(clojure.lang.Reflector/invokeConstructor org.joml.Vector3f (into-array '(0.0 0.0 0.0)))
(clojure.lang.Reflector/invokeConstructor gameEngine.Camera (into-array '(1.0471976 1000.0 0.01 #object[org.joml.Vector3f 0x6e572f5e ( 0,000E+0  0,000E+0  0,000E+0)])))
(clojure.lang.Reflector/invokeConstructor gameEngine.Camera (into-array '(1.0471976 1000.0 0.01 (org.joml.Vector3f 0 0 0 ))))
(clojure.lang.Reflector/invokeConstructor gameEngine.Camera (into-array '(1.0471976 1000.0 0.01 (org.joml.Vector3f 0 0 0))))
(clojure.lang.Reflector/invokeConstructor gameEngine.Camera (into-array '(1.0471976 1000.0 0.01 (org.joml.Vector3f. 0 0 0))))
exit
(boot (build))
(use 'yaw.world)
(ednToObject [java.awt.Point [java.awt.Point 1 2]])
(java.awt.Point. (java.awt.Point. 1 2))
exit
(boot (build))
(use 'yaw.world)
(new java.awt.Point 1 2)
(new gameEngine.Camera 1 2 3)
(new gameEngine.Camera.)
(new gameEngine.Camera)
(new gameEngine.Camera (1 2 3))
(new gameEngine.Camera '(1 2 3))
(gameEngine.Camera. 1 2 3)
(gameEngine.Camera. 1 2)
(gameEngine.Camera. 1 2 3)
(gameEngine.Camera. 1 2 3 4 5 6)
(gameEngine.Camera. 1 2 3 4 5 )
(gameEngine.Camera. 1 2 3 4 5)
(gameEngine.Camera. 1 2 3 4)
(gameEngine.Camera. 1 2 3 4 5 6)
(gameEngine.Camera. 1.0 2.0 3.0 4.0 5.0 6.0)
(gameEngine.Camera. 1.0 2.0 3.0 4.0 5.0 6.0 7.0)
(def lol (gameEngine.Camera. 1.0 2.0 3.0 4.0 5.0 6.0))
lol
(def lol (clojure.lang.Reflector/invokeConstructor gameEngine.Camera '(1 2 3 4 5 6)))
(def lol (clojure.lang.Reflector/invokeConstructor gameEngine.Camera 1 2 3 4 5 6))
(into-array '(1 2 3))
(def lol (clojure.lang.Reflector/invokeConstructor gameEngine.Camera (into-array ('1 2 3 4 5 6)))
)
(def lol (clojure.lang.Reflector/invokeConstructor gameEngine.Camera (into-array ('1 2 3 4 5 6))))
lol
(def lol (clojure.lang.Reflector/invokeConstructor gameEngine.Camera (into-array '(1 2 3 4 5 6))))
lol
exot
exit
(boot (build))
(use 'yaw.world)
(def lol (clojure.lang.Reflector/invokeConstructor gameEngine.Camera (into-array '(1 2 3 4 5 6))))
lol
(gameEngine.Camera. 1.0 2.0 3.0 4.0 5.0 6.0)
(gameEngine.Camera. 1 2 3 4 5 6)
(org.joml.Vector3f. 1 2 3)
(.setPosition lol (org.joml.Vector3f. 1 2 3))
(.getPosition lol)
(def universe(start-yaw))
(.getCamera (:world @universe))
(.createCube (:world @universe))
(def universe(start-yaw))
(boot (build))
(use 'yaw.world)
(def lol (org.joml.Vector3f 0 0 0))
(def lol (org.joml.Vector3f. 0 0 0))
(.getX lol)
(.getx lol)
(.get lol 0)
(def lol (org.joml.Vector3f. 1 2 3))
(.get lol 0)
(.get lol 1)
(.get lol 2)
exit
(boot (build))
(use 'yaw.world)
(def universe(start-yaw))
(saveCameras "camera.edn" (:world @universe))
(loadCameras "camera.edn" (:world @universe))
(saveCameras "camera.edn" (:world @universe))
(loadCameras "camera.edn" (:world @universe))
(.getPosition (.getCamera))
)
(.getPosition (.getCamera (:world @universe)))
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(saveLights "lights.edn" world)
exit
(def lol [1 2 3])
lol
(get lol 0)
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
(loadLights "lights.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadLights "lights.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadLights "lights.edn" world)
exot
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadLights "lights.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadLights "lights.edn" world)
(loadCameras "cameras.edn" world)
(loadCameras "camera.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "camera.edn" world)
(loadLights "lights.edn" world)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(saveLights "lights.edn" world)
(saveCameras "cameras.edn" world)
(loadCameras "cameras.edn")
(loadLights "cameras.edn")
(loadLights "lights.edn")
(.getPointLightTable (.getSceneLight world))
(.getPointTable (.getSceneLight world))
(vec (.getPointTable (.getSceneLight world)))
(get (vec (.getPointTable (.getSceneLight world))) 4)
(.getColor (get (vec (.getPointTable (.getSceneLight world))) 4))
(.getColor (get (vec (.getPointTable (.getSceneLight world))) 0))
(lazy-seq [1 2 3])
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "cameras.edn")
exit
(def lol '(1))
lol
(rest lol)
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "cameras.edn")
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(loadCameras "cameras.edn")
(loadLights "lights.edn")
exit
(boot (build))
(use 'yaw.world)
(def universe (start-yaw))
(def world (:world @universe))
(saveLights "lights.edn" world)
(saveCameras "cameras.edn" world)
(loadLights "lights.edn")
(loadCameras "cameras.edn")
(addSpotLight world 255 0 0 1 1 1 0.6 10 10 10 1 1 1 10 2)
(createCube world)
(addSpotLight world 255 0 0 1 1 1 0.6 10 10 10 1 1 1 10 2)
(addSpotLight world 255 0 0 1 1 1 0.6 10 10 10 10 10 10 10 2)
(addSpotLight world 255 0 0 1 1 1 1 10 10 10 10 10 10 10 2)
(addSpotLight world 255 0 0 0 0 1 1 10 10 10 10 10 10 10 2)
(addSpotLight world 255 0 255 0 0 1 1 10 10 10 10 10 10 10 2)
(saveLights "lights.edn" world)
(loadLights "lights.edn")
(addCamera world)
(saveCameras "cameras.edn" world)
(loadCameras "cameras.edn")
(setLiveCamera world (getCamera world 2)
)
(setLiveCamera world (getCamera world 2))
(setLiveCamera world (getCamera world 1))
(setLiveCamera world (getCamera world 0))
(setLiveCamera world (getCamera world 2))
(saveCameras "cameras.edn" world)
(loadCameras "cameras.edn")
exit
