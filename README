Move to this repository. and execute:

	boot repl

then inside the repl :	(boot (build))

It should have begin a REPL and execute the build.boot.
Then for execute the exemple execute:

###Initialisation of the world :
boot.user=> (use 'yaw.world)
boot.user=> (def universe(start-yaw))

##Light
# Set the directional light : (world r g b intensity x y z)
boot.user=> (setSunLight (:world @universe) 1.0 1.0 1.0 1.0 0.0 0.0 0.0)

#Set the AmbiantLight : (world r g b intensity)
boot.user=> (setAmbiantLight (:world @universe) 1.0 1.0 1.0 0.8)

#add a Spot Light (Maximum of five) :
(world r g b x y z  intensity constantA linearAtt quadraticAtt xcone ycone zcone cutoffAngle number)
boot.user=> (addSpotLight (:world @universe) 1.0 1.0 1.0 0.0 0.0 0.0 0.8 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0)

#add a Point Light (Maximum of five) :
(world r g b x y z intensity constantAtt linearAtt quadraticAtt number)
boot.user=>(addPointLight (:world @universe) 1.0 1.0 1.0 0.0 0.0 0.0 0.5)

##Camera
# add a Camera :
boot.user=> (addCamera (:world @universe))

# Set the live camera :
boot.user=> (setLiveCamera (:world @universe) camera)

# Get the Camera in the offset "number" :
boot.user=> (getCamera (:world @universe) number)

# Get a vector with all the camera :
boot.user=> (getListCamera (:world @universe))

# Get the live camera :
boot.user=> (getLiveCamera (:world @universe))

# Remove the camera at the offset "number" :
boot.user=> (removeCameraNumber (:world @universe) number)

# Remove the camera :
boot.user=> (removeCamera (:world @universe) camera) 

# Set the position of the camera : (camera x y z)
boot.user=> (setPositionCamera camera 10.0 0.0 2.0)

##Item
#Creating a Block : (world r g b xL yL zL scale)
(createBlock (:world @universe) red green blue XLength YLength ZLength Scale)
boot.user=> (def item (createBlock (:world @universe) 1.0 0.0 0.0 2.0 2.0 2.0 1.0))

#Creating a HalfBlock : 
boot.user=> (def item (createHalfBlock (:world @universe) 1.0 0.0 0.0 2.0 2.0 2.0 1.0))

#Creating a Pyramid :
boot.user=> (def item (createPyramid (:world @universe) 1.0 0.0 0.0 2.0 2.0 2.0 1.0))

#Remove Item : (world item)
boot.user=> (removeItem (:world @universe) item)
      
#Get a vector with all the items :
boot.user=> (getListItems (:world @universe))

#Move : (item x y z)
boot.user=> (translate item 1.0 2.0 0.0)

#Rotate : (item x y z)
boot.user=> (rotate item 2.0 1.0 1.0)

#Changing the position : (item x y z)
boot.user=> (setPosition item 0.0 10.0 0.0)

#Changing the color : (item r g b) (0 to 1 for the color)
boot.user=> (setColor item 1.0 0.0 0.0)


## Callback

Create a function, it has to implements IFn

boot.user=> (defn tutu [] clojure.lang.IFn (createBlock (:world @universe) 1.0 0.0 0.0 2.0 2.0 2.0 1.0))

Now use the registerCallback function with the key to push to invoke the function
boot.user=> (registerCallback (:world @universe) "t" tutu)


